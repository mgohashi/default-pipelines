pipeline { 
  environment {
    PRODUCT_OWNERS_GROUP = 'P_IJK_APROVADOR_PRODUCAO'
    APPROVERS_GROUP = 'P_IJK_LIBERACAO_PRODUCAO'
    DEPLOYERS_GROUP = 'P_IJK_OPERADOR_PRODUCAO'

    //PRODUCT_OWNERS_GROUP = 'gestores'
    //APPROVERS_GROUP = 'aprovadores'
    //DEPLOYERS_GROUP = 'deployers'    
  }

  agent any

  stages {
    stage('Checkout') {
      steps {
        script {
          sh 'printenv'
          echo "Checkout do código fonte de ${APP_GIT_URL}..."
          git url: "${APP_GIT_URL}", branch: "${BRANCH}"
        }
      }
    }
    stage('Configurar Pipeline') {
      steps {
        script {
          def branch = "${BRANCH}"

          if (branch == 'master') {
            echo 'Env = Produção'
            env.REQUIRES_BUILD = 'N'
            env.REQUIRES_DEPLOYMENT = 'Y'
            env.REQUIRES_APPROVAL = 'Y'
            env.REQUIRES_PROMOTION = 'N'
            env.REQUIRES_DIRECT_PROMOTION = 'N'
            env.VERSION = 'MASTER'
          } else if (branch.matches('^release/.+$')) {
            echo 'Env = Homologação'
            env.REQUIRES_BUILD = 'Y'
            env.REQUIRES_DEPLOYMENT = 'Y'
            env.REQUIRES_APPROVAL = 'N'
            env.REQUIRES_PROMOTION = 'Y'
            env.REQUIRES_DIRECT_PROMOTION = 'N'
            env.VERSION = branch.replaceAll('^release/', '')
          } else if (branch.matches('^hotfix/.+$')) {
            echo 'Env = Hotfix'
            env.REQUIRES_BUILD = 'Y'
            env.REQUIRES_DEPLOYMENT = 'Y'
            env.REQUIRES_APPROVAL = 'Y'
            env.REQUIRES_PROMOTION = 'Y'
            env.REQUIRES_DIRECT_PROMOTION = 'Y'
            env.VERSION = branch.replaceAll('^hotfix/', '')
          } else if (branch == 'develop') {
            echo 'Env = Desenvolvimento'
            env.REQUIRES_BUILD = 'Y'
            env.REQUIRES_DEPLOYMENT = 'Y'
            env.REQUIRES_APPROVAL = 'N'
            env.REQUIRES_PROMOTION = 'N'
            env.REQUIRES_DIRECT_PROMOTION = 'N'
            env.VERSION = 'DEVELOP'
          } else {
            echo 'Env = Nenhum'
            env.REQUIRES_BUILD = 'N'
            env.REQUIRES_DEPLOYMENT = 'N'
            env.REQUIRES_APPROVAL = 'N'
            env.REQUIRES_PROMOTION = 'N'
            env.REQUIRES_DIRECT_PROMOTION = 'N'
            env.VERSION = 'NONE'
          }

          sh 'printenv'
        }
      }
    }
    stage('Build') {
      when {
        environment name: 'REQUIRES_BUILD', value: 'Y'
      }
      steps {
        script {
          echo "Excutando o build da aplicação..."
        }
      }
    }
    stage('Testes Unitários') {
      when {
        environment name: 'REQUIRES_BUILD', value: 'Y'
      }
      steps {
        script {
          echo "Executando testes unitários..."
        }
      }
    }
    stage('Analise Estática') {
      when {
        environment name: 'REQUIRES_BUILD', value: 'Y'
      }
      steps {
        script {
          echo "Executando análise estática..."
        }
      }
    }
    stage('Exportar para Nexus') {
      when {
        environment name: 'REQUIRES_BUILD', value: 'Y'
      }
      steps {
        script {
          echo "Exportando para o nexus..."
        }
      }
    }
    stage('Build de Imagem') {
      when {
        allOf {
          environment name: 'REQUIRES_BUILD', value: 'Y'
          environment name: 'REQUIRES_DEPLOYMENT', value: 'Y'
        }
      }
      steps {
        script {
          echo "Fazendo build da imagem..."
        }
      }//steps
    }//stage
    stage('Aprovação') {
      agent none
      when {
        allOf { 
          environment name: 'REQUIRES_DEPLOYMENT', value: 'Y'
          environment name: 'REQUIRES_APPROVAL', value: 'Y'
          environment name: 'REQUIRES_DIRECT_PROMOTION', value: 'N'
        }
      }
      steps {
        script {
          def branch = params.BRANCH
          def groupToApprove = env.PRODUCT_OWNERS_GROUP

          if (branch == 'master') {
              groupToApprove = env.DEPLOYERS_GROUP
          }

          input(
              message: "Você gostaria de aprovar o deployment da aplicação ${APP_NAME} - VERSAO: ${VERSION} - BUILD: ${BUILD_NUMBER}?",
              ok: "Sim, gostaria.",
              submitter: groupToApprove,
              submitterParameter: "USERNAME"
          )
        }
      }//steps
    }//stage
    stage('Deploy') {
      when {
        environment name: 'REQUIRES_DEPLOYMENT', value: 'Y'
        environment name: 'REQUIRES_DIRECT_PROMOTION', value: 'N'
      }
      steps {
        script {
          echo "Executando deployment..."
        }
      }//steps
    }//stage
    stage('Promover') {
      agent none
      when {
        allOf {
          environment name: 'REQUIRES_DEPLOYMENT', value: 'Y'
          environment name: 'REQUIRES_PROMOTION', value: 'Y'
        }
      }
      steps {
        script {
          input(
              message: "Você gostaria de liberar a promoção da aplicação ${APP_NAME} - VERSAO: ${VERSION} - BUILD: ${BUILD_NUMBER}?",
              ok: "Sim, gostaria.",
              submitter: env.APPROVERS_GROUP,
              submitterParameter: "USERNAME"
          )
        }
      }//steps
    }//stage
    stage('Promover Imagem') {
      when {
        environment name: 'REQUIRES_DEPLOYMENT', value: 'Y'
        environment name: 'REQUIRES_PROMOTION', value: 'Y'
      }
      steps {
        script {
          echo "Promover Imagem..."
          openshift.withCluster() {
            openshift.withProject("${NAMESPACE_PRD}") {
              echo "Usando projeto: ${NAMESPACE_PRD}"
              
              echo "Selecionando build config ${APP_NAME}"

              def build = openshift.selector("bc", "${APP_NAME}")

              if (build.exists()) {
                echo "Starting build config ${APP_NAME}..."
                build.startBuild()
              }
            }
          }
        }
      }//steps
    }//stage
    stage('Finalizando') {
      steps {
        script {
          echo "Finalizando..."
        }
      }
    }
  }//stages
}//pipeline